EXSLT is a library of extension functions and instructions for XSLT
1.0.  It defines several modules, providing features like regular
expressions, dates & times manipulation functions, or dynamic
evaluation of XPath expressions provided as strings.  The most popular
of them was without any doubt the node-set() function, allowing one to
use a result tree fragment as a node-set.

With the new version of XSLT, some of the extensions provided by EXSLT
are not needed anymore.  Regular expressions for instance have been
included in XPath 2.0 and XSLT 2.0, and node-set() does not make sense
anymore because result tree fragments do not exist in XSLT 2.0.  Other
extensions are still usefull as trigonometric functions.  Or the
dyn:evaluate() function.  But the later should be redefined and
adapted to the new data model, and the new definitions of context in
XSLT 2.0.

And besides those adaptations, the new features in XPath and XSLT 2.0
brought their own needs for new extensions.  For instance sequences,
that are the core of the new data model.  They cannot be nested, and
that is consistent with the need for compatibility with XSLT 1.0.  But
that limitation also prevent us to define more complex data structures
that do not require copies and losing information.

Eventually, new abilities broaden the scope of possible applications.
Because we can do more complex treatments more easily, we just want to
be able to do more complex stuff yet.  This kind of extensions
encompasses the ability to parse HTML or XML fragments from strings,
to send HTTP requests, to get information from a file system, or to
handle ZIP files.  And much more.

This introduction will show some live examples with two new proposed
extensions.  The first one is an HTTP Client to send HTTP requests and
use their responses.  This allows one to get resources from the
Internet, to ask web services (SOAP and REST, like Google APIs,) and
even to build a wsdl2xslt stylesheet.  The second one is an extension
to deal with ZIP files, to be able to handle ODF and Open XML
documents.

// There are two more kinds of extension that are a bit behind the
// current scope of EXSLT, but that would benefit from being included
// in a well-known project as EXSLT.  The first one is not really
// about extensions, but instead about general-purpose function
// libraries like FunctX, by Priscilla Walmsley.



*****

1/ En plus d'exemples utilisant HTTP CLient, coder une ebauche
   fonctionelle d'extension pour les fichiers ZIP.  Elle n'a pas
   besoin d'etre tres pousser, juste les fonctionalites ad-hoc pour
   quelques exemples simples avec ODF et Open XML.

   Mais cela me permetera d'avoir des exemples cools avec ODF et Open
   XML en plus des APIs Google.  Voire de cumuler les deux !  Par
   exemple l'API Google Docs + ODF ...

2/ WSDL COMPILER !  Remanier (re-ecrire?) le WSDL compiler pour
   generer des requetes utilisant http:send-request.

   Parallelement, ecrire une bibliotheque de fonctions pour SOAP, qui
   utiliseraient elles aussi http:send-request.  Et bien sur
   formaliser les modules Google API en se basant sur la hierarchie de
   classes de la version Java ou Python (service, feed, entry, ...)

   Google Data APIs:
   http://code.google.com/apis/gdata/

     How do I start?

     If you're new to the Google Data APIs, here's how we recommend
     you get started:

     1. Read the [conceptual overview], and learn the [protocol
        basics].
     2. Decide whether to use one of our programming-language-specific
        [client libraries] or stick with the raw [XML and HTTP].
     3. Pick a Google service to connect to, and read the appropriate
        developer's guide.
     4. Take a look at our [samples] for ideas.
